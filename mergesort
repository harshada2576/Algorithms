#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void fileMake(int n) {
	int i;
    FILE* fptr = fopen("randnum.txt", "w");
    for ( i = 0; i < n; i++) {
        fprintf(fptr, "%d\n", rand() % 100000); // Random numbers between 0â€“99999
    }
    fclose(fptr);
}
void readFromFile(int arr[], int *count) {
    FILE *file = fopen("randnum.txt", "r");
    *count = 0;
    while (fscanf(file, "%d", &arr[*count]) != EOF) {
        (*count)++;
    }
    fclose(file);
}
void writeNumbersToFile(int arr[], int count) {
		int i;

    FILE *file = fopen("sortednum.txt", "w");
    for ( i = 0; i < count; i++) {
        fprintf(file, "%d\n", arr[i]);
    }
    fclose(file);
}
// Merge Sort Implementation
void merge(int arr[], int left, int mid, int right) {
		int i,j,k;

    int n1 = mid - left + 1;
    int n2 = right - mid;
    int L[n1], R[n2];

    for ( i = 0; i < n1; i++) L[i] = arr[left + i];
    for ( j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

    i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        arr[k++] = (L[i] <= R[j]) ? L[i++] : R[j++];
    }
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Recursive Min/Max Function
void minmax(int arr[], int low, int high, int *min, int *max) {
    if (low == high) {
        if (arr[low] < *min) *min = arr[low];
        if (arr[low] > *max) *max = arr[low];
    } else {
        int mid = (low + high) / 2;
        minmax(arr, low, mid, min, max);
        minmax(arr, mid + 1, high, min, max);
    }
}

int main() {
    int n;
    printf("Enter number of terms: ");
    scanf("%d", &n);

    int *arr = (int *)malloc(n * sizeof(int));
    fileMake(n);

    readFromFile(arr, &n);

    clock_t start = clock();
    mergeSort(arr, 0, n - 1);
    clock_t end = clock();

    writeNumbersToFile(arr, n);

    // Find Min and Max
    int min = arr[0], max = arr[0];
    minmax(arr, 0, n - 1, &min, &max);

    printf("Minimum: %d\n", min);
    printf("Maximum: %d\n", max);
    printf("Merge Sort Time: %.4f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    free(arr);
    return 0;
}
